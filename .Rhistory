oqcsv <- function(x) {
library(lubridate)
library(data.table)
# DATA IMPORT
# cols in original file (OptiQuant csv export):
# count_datetime  session_id  session_started  session_finished  session_total_counted  schedule_id	schedule_started	schedule_ended	gate_id	gate_label	gate_group_id	gate_group_label	person_kind_id	person_kind	segment_id	start_latitude	start_longitude	end_latitude	end_longitude
# import file fast, set date-time columns (that matter) as character for future coercion
dataImport <- read.table(file = x,
header = TRUE,
sep = "," ,
dec = "." ,
colClasses = c("character", "integer", "character", "character", "integer", "NULL", "NULL", "NULL", "integer", "NULL", "NULL", "NULL", "NULL", "factor", "NULL", "NULL", "NULL", "NULL", "NULL"),
comment.char = ""
)
# Rename col  count_datetime to timeStampO
setnames(dataImport, "count_datetime", "timeStampO")
# coerce cols with time to POSIXlt
# csv date format 1/5/2015  15:00:00 (mind the double space between date and hour)
dataImport$timeStampO <- strptime(dataImport$timeStampO, "%m/%d/%y  %H:%M")
dataImport$session_started <- strptime(dataImport$session_started, "%m/%d/%y  %H:%M")
dataImport$session_finished <- strptime(dataImport$session_finished, "%m/%d/%y  %H:%M")
dataImport$id <- c(1:nrow(dataImport))
dataImportCt <- dataImport # copy dataImport to use when POSIXct is necessary
# coerce all time to POSIXct
dataImportCt$timeStampO <- as.POSIXct(dataImport$timeStampO, format = "%m/%d/%y  %H:%M")
dataImportCt$session_started <- as.POSIXct(dataImport$session_started, format = "%m/%d/%y  %H:%M")
dataImportCt$session_finished <- as.POSIXct(dataImport$session_finished, format = "%m/%d/%y  %H:%M")
# extract weekday and hour from timeStamp
# dataImport$weekday <- as.factor(weekdays(dataImport$timeStampO, abbreviate = TRUE))
# dataImport$hour <- as.factor(hour(dataImport$timeStampO))
dataImportCt$year <- as.integer(year(dataImportCt$timeStampO))
dataImportCt$month <- as.integer(month(dataImportCt$timeStamp))
dataImportCt$day <- as.integer(day(dataImportCt$timeStamp))
dataImportCt$weekday <- as.factor(weekdays(dataImportCt$timeStampO, abbreviate = TRUE))
dataImportCt$hour <- as.integer(hour(dataImportCt$timeStampO))
dataImportCt$week <- as.integer(week(dataImportCt$timeStampO))
# extract mins from session_started to identify sessions which started off: late or early
# dataImport$min_start_off <- minute(dataImport$session_started)
dataImportCt$min_start_off <- minute(dataImportCt$session_started)
# create col session_length = session_finished - session_started
# dataImport$session_length <- with(dataImport, difftime(session_finished, session_started, unit = "mins"))
dataImportCt$session_length <- with(dataImportCt, difftime(session_finished, session_started, unit = "mins"))
# convert to data-table with setDT(). (unlike with data.table() no copy is made, so setDT() is more memory efficient and faster)
setDT(dataImportCt)
setkey(dataImportCt, session_id, gate_id, timeStampO, hour, weekday, week)
dataImportCt$timeStamp <- dataImportCt$timeStampO
# Keeps dataImport and dataImportCt for further use in later releases
# passes events on to user
events <- dataImportCt
return(events)
}
tst1 <- oqcsv(x = "testdata.csv")
load_all()
library(devtools)
install/packages("devtools")
install.packages("devtools")
library("devtools", lib.loc="~/Dropbox/JPLab/R Projects/OptiQuantR/packrat/lib/x86_64-apple-darwin13.4.0/3.2.2")
library("roxygen2", lib.loc="~/Dropbox/JPLab/R Projects/OptiQuantR/packrat/lib/x86_64-apple-darwin13.4.0/3.2.2")
library(devtools)
load_all()
library(lubridate)
library(data.table)
oqcsv <- function(x) {
# cols in original file (OptiQuant csv export):
# count_datetime  session_id  session_started  session_finished  session_total_counted  schedule_id	schedule_started	schedule_ended	gate_id	gate_label	gate_group_id	gate_group_label	person_kind_id	person_kind	segment_id	start_latitude	start_longitude	end_latitude	end_longitude
# import file fast, set date-time columns (that matter) as character for future coercion
dataImport <- read.table(file = x,
header = TRUE,
sep = "," ,
dec = "." ,
colClasses = c("character", "integer", "character", "character", "integer", "NULL", "NULL", "NULL", "integer", "NULL", "NULL", "NULL", "NULL", "factor", "NULL", "NULL", "NULL", "NULL", "NULL"),
comment.char = ""
)
# Rename col  count_datetime to timeStampO
setnames(dataImport, "count_datetime", "timeStampO")
# coerce cols with time to POSIXlt
# csv date format 1/5/2015  15:00:00 (mind the double space between date and hour)
dataImport$timeStampO <- strptime(dataImport$timeStampO, "%m/%d/%y  %H:%M")
dataImport$session_started <- strptime(dataImport$session_started, "%m/%d/%y  %H:%M")
dataImport$session_finished <- strptime(dataImport$session_finished, "%m/%d/%y  %H:%M")
dataImport$id <- c(1:nrow(dataImport))
dataImportCt <- dataImport # copy dataImport to use when POSIXct is necessary
# coerce all time to POSIXct
dataImportCt$timeStampO <- as.POSIXct(dataImport$timeStampO, format = "%m/%d/%y  %H:%M")
dataImportCt$session_started <- as.POSIXct(dataImport$session_started, format = "%m/%d/%y  %H:%M")
dataImportCt$session_finished <- as.POSIXct(dataImport$session_finished, format = "%m/%d/%y  %H:%M")
# extract weekday and hour from timeStamp
# dataImport$weekday <- as.factor(weekdays(dataImport$timeStampO, abbreviate = TRUE))
# dataImport$hour <- as.factor(hour(dataImport$timeStampO))
dataImportCt$year <- as.integer(year(dataImportCt$timeStampO))
dataImportCt$month <- as.integer(month(dataImportCt$timeStamp))
dataImportCt$day <- as.integer(day(dataImportCt$timeStamp))
dataImportCt$weekday <- as.factor(weekdays(dataImportCt$timeStampO, abbreviate = TRUE))
dataImportCt$hour <- as.integer(hour(dataImportCt$timeStampO))
dataImportCt$week <- as.integer(week(dataImportCt$timeStampO))
# extract mins from session_started to identify sessions which started off: late or early
# dataImport$min_start_off <- minute(dataImport$session_started)
dataImportCt$min_start_off <- minute(dataImportCt$session_started)
# create col session_length = session_finished - session_started
# dataImport$session_length <- with(dataImport, difftime(session_finished, session_started, unit = "mins"))
dataImportCt$session_length <- with(dataImportCt, difftime(session_finished, session_started, unit = "mins"))
# convert to data-table with setDT(). (unlike with data.table() no copy is made, so setDT() is more memory efficient and faster)
setDT(dataImportCt)
setkey(dataImportCt, session_id, gate_id, timeStampO, hour, weekday, week)
dataImportCt$timeStamp <- dataImportCt$timeStampO
# Keeps dataImport and dataImportCt for further use in later releases
# passes events on to user
events <- dataImportCt
return(events)
}
# import file fast, set relevant date-time columns as character for future coercion
dataImport <- read.table(file = testdata,
header = TRUE,
sep = "," ,
dec = "." ,
colClasses = c("character", "integer", "character", "character", "integer", "NULL", "NULL", "NULL", "integer", "NULL", "NULL", "NULL", "NULL", "factor", "NULL", "NULL", "NULL", "NULL", "NULL"),
comment.char = ""
)
# Rename col  count_datetime to timeStampO
setnames(dataImport, "count_datetime", "timeStampO")
# coerce cols with time to POSIXlt
# csv date format 1/5/2015  15:00:00 (mind the double space between date and hour)
dataImport$timeStampO <- strptime(dataImport$timeStampO, "%m/%d/%y  %H:%M")
dataImport$session_started <- strptime(dataImport$session_started, "%m/%d/%y  %H:%M")
dataImport$session_finished <- strptime(dataImport$session_finished, "%m/%d/%y  %H:%M")
dataImport$id <- c(1:nrow(dataImport))
dataImportCt <- dataImport # copy dataImport to use when POSIXct is necessary
# coerce all time cols to POSIXct
dataImportCt$timeStampO <- as.POSIXct(dataImport$timeStampO, format = "%m/%d/%y  %H:%M")
dataImportCt$session_started <- as.POSIXct(dataImport$session_started, format = "%m/%d/%y  %H:%M")
dataImportCt$session_finished <- as.POSIXct(dataImport$session_finished, format = "%m/%d/%y  %H:%M")
# extract date time elements for easier use
dataImportCt$year <- as.integer(year(dataImportCt$timeStampO))
dataImportCt$month <- as.integer(month(dataImportCt$timeStamp))
dataImportCt$day <- as.integer(day(dataImportCt$timeStamp))
dataImportCt$weekday <- as.factor(weekdays(dataImportCt$timeStampO, abbreviate = TRUE))
dataImportCt$hour <- as.integer(hour(dataImportCt$timeStampO))
dataImportCt$week <- as.integer(week(dataImportCt$timeStampO))
# extract mins from session_started to identify sessions which started off: late or early
dataImport$min_start_off <- minute(dataImport$session_started)
dataImportCt$min_start_off <- minute(dataImportCt$session_started)
# create col session_length = session_finished - session_started
dataImport$session_length <- with(dataImport, difftime(session_finished, session_started, unit = "mins"))
dataImportCt$session_length <- with(dataImportCt, difftime(session_finished, session_started, unit = "mins"))
# convert to data-table with setDT(). (unlike with data.table() no copy is made, so setDT() is more memory efficient and faster)
setDT(dataImportCt)
setkey(dataImportCt, session_id, gate_id, timeStampO, hour, weekday, week)
dataImportCt$timeStamp <- dataImportCt$timeStampO
# Keeps dataImport and dataImportCt for further use in later releases
# passes events on to user
events <- dataImportCt
library(lubridate)
library(data.table)
library("packrat", lib.loc="~/Dropbox/JPLab/R Projects/OptiQuantR/packrat/lib/x86_64-apple-darwin13.4.0/3.2.2")
packrat::restore(prompt = FALSE)
library(OptiQuantR)
library(OptiQuantR)
library(OptiQuantR)
library(roxygen2)
library(OptiQuantR)
revtools::document()
devtools::document()
library(OptiQuantR)
library(OptiQuantR)
library(OptiQuantR)
?
?OptiQuantR
library(OptiQuantR)
?OptiQuantR
devtools::document()
?OptiQuantR
?
??OptiQuantR
devtools::document(OptiQuantR)
devtools::document()
devtools::document()
library(OptiQuantR)
devtools::document()
devtools::document()
library(OptiQuantR)
devtools::document()
library(OptiQuantR)
devtools::document()
library(OptiQuantR)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
library(OptiQuantR)
context("Table properties")
names(c("timeStampO",
"session_id",
"session_started",
"session_finished",
"session_total_counted",
"gate_id",
"person_kind",
"id",
"year",
"month",
"day",
"weekday",
"hour",
"week",
"min_start_off",
"session_length",
"timeStamp"))
testthat("output has 17 columns", {
expect_equal(ncol(readoqcsv(testdata.csv)), 17)
expect_match(colnames(readoqcsv(testdata.csv)), names, ignore.case = TRUE, all = TRUE)
})
library(testthat)
library(OptiQuantR)
context("Table properties")
names(c("timeStampO",
"session_id",
"session_started",
"session_finished",
"session_total_counted",
"gate_id",
"person_kind",
"id",
"year",
"month",
"day",
"weekday",
"hour",
"week",
"min_start_off",
"session_length",
"timeStamp"))
testthat("output has 17 columns", {
expect_equal(ncol(readoqcsv(testdata.csv)), 17)
expect_match(colnames(readoqcsv(testdata.csv)), names, ignore.case = TRUE, all = TRUE)
})
library(testthat)
library(OptiQuantR)
context("Table properties")
names(c("timeStampO",
"session_id",
"session_started",
"session_finished",
"session_total_counted",
"gate_id",
"person_kind",
"id",
"year",
"month",
"day",
"weekday",
"hour",
"week",
"min_start_off",
"session_length",
"timeStamp"))
test_that("output has 17 columns", {
expect_equal(ncol(readoqcsv(testdata.csv)), 17)
expect_match(colnames(readoqcsv(testdata.csv)), names, ignore.case = TRUE, all = TRUE)
})
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(OptiQuantR)
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
library(data.table)
devtools::test()
library(OptiQuantR)
devtools::document()
library(OptiQuantR)
devtools::document()
library(OptiQuantR)
library(OptiQuantR)
devtools::build_win()
devtools::use_readme_rmd()
devtools::use_readme_rmd()
library(OptiQuantR)
library(OptiQuantR)
library(OptiQuantR)
library(OptiQuantR)
library(OptiQuantR)
devtools::use_data_raw()
library(OptiQuantR)
library(OptiQuantR)
devtools::release()
devtools::release()
devtools::build()
